package com.bridgeit.todo.controller;

import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.bridgeit.todo.model.ErrorMessage;
import com.bridgeit.todo.model.Note;
import com.bridgeit.todo.model.User;
import com.bridgeit.todo.service.NoteService;
import com.bridgeit.todo.service.UserService;

import scala.annotation.meta.setter;

@Controller
public class NoteController {
	
	@Autowired
	NoteService noteService;

	@Autowired
	UserService userService;

/*	
@RequestMapping(value = "/addNote/{id}", method = RequestMethod.POST)
	public ResponseEntity<ErrorMessage> saveNotes(Note note, @PathVariable int id) {

		ErrorMessage message = new ErrorMessage();
		User user1 = userService.getUserById(id);
		
		Date date = new Date();
		note.setCreatedDate(date);
		note.setModifiedDate(date);

		note.setUser(user1);
		int userId = noteService.saveNotes(note);

		if (userId != 0) {
			message.setResponseMessage("Data Successfully inserted ");
			return ResponseEntity.status(HttpStatus.CREATED).body(message);
		}
		message.setResponseMessage("Note could not be added");
		return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(message);
	*/
/*@RequestMapping(value="/update",method = RequestMethod.POST)
	public ModelAndView update(Notes note,HttpSession session)
	{
		User user=(User) session.getAttribute("user");
		note.setUser(user);
		Date date=new Date();
		note.setModifiedDate(date);
		Notes currentNote=notesService.fetchById(note.getId());
		ModelAndView modelAndView=new ModelAndView();
		if(currentNote!=null) {
			Date date1=(Date) session.getAttribute("createTime");
			note.setCreateDate(date1);
			notesService.modifiedNotes(note.getId(), note);
		}
		
		modelAndView.addObject("user1",user);
		List<Notes> notes=notesService.fetchAllNotes(user);
		modelAndView.addObject("notes",notes);
		modelAndView.addObject("note",note);
		System.out.println(modelAndView.getViewName());
		System.out.println("DDD ->"+modelAndView.wasCleared());
		modelAndView.setViewName("home");
		System.out.println(modelAndView.getViewName());
		
		return modelAndView;
		
	}
	  }*/
	
	
	@RequestMapping(value= "/addNote", method = RequestMethod.POST)
	public ModelAndView addNote( HttpSession session, Note note) {
		

		//User noteUser = userService.getUserById(id);
		User noteUser=(User) session.getAttribute("user");
		Date date = new Date();
		note.setCreatedDate(date);
		note.setModifiedDate(date);	
		note.setUser(noteUser);
		noteService.saveNotes(note);
		List<Note> notes=noteService.findAllNote(noteUser);
		
		ModelAndView modelAndView=new ModelAndView();
		modelAndView.setViewName("home");
		modelAndView.addObject("user",noteUser);
		modelAndView.addObject("notes",notes);
		modelAndView.addObject("note",note);
		return modelAndView;
	}
	
	@RequestMapping(value="/delete/{id}",method = RequestMethod.GET)
	public ModelAndView deleteNote(@PathVariable int id, Note note, HttpSession session) {
		
		System.out.println("Inside delete");
		noteService.deleteNoteById(id);
		
		User noteUser=(User) session.getAttribute("user");
		List<Note> notes=noteService.findAllNote(noteUser);
		ModelAndView modelAndView=new ModelAndView();
		
		modelAndView.setViewName("home");
		modelAndView.addObject("user",noteUser);
		modelAndView.addObject("notes",notes);
		modelAndView.addObject("note",note);
		return modelAndView;	
	}
	@RequestMapping(value = "/update", method = RequestMethod.PUT)
	public  ModelAndView updateNote(Note note,HttpSession session) {
		
		ModelAndView modelAndView=new ModelAndView();
		User user=(User) session.getAttribute("user");
		Note oldNote = noteService.getNoteById(note.getNoteId());
		if (user != null) {

			if (oldNote.getUser().getId() == user.getId()) {
				note.setUser(user);

				noteService.updateNote(note);
				System.out.println("Data Successfully Updated");
			}
		}
		modelAndView.addObject("user1",user);
		List<Note> notes=noteService.findAllNote(user);
		modelAndView.addObject("notes",notes);
		modelAndView.addObject("note",note);
		modelAndView.setViewName("home");
		return modelAndView;
	}
}
