package com.bridgeit.todo.dao;

import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCrypt;
import org.springframework.stereotype.Service;

import com.bridgeit.todo.model.User;

@Service("UserDao")
public class UserDaoImpl implements UserDao {

	@Autowired
	private SessionFactory sessionFactory;

	public SessionFactory getSessionFactory() {
		return sessionFactory;
	}

	public void setSessionFactory(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}

	 ////////////////// Login RegisteredUser ////////////
	
	@SuppressWarnings("deprecation")
	public User userLogin(User user) {
		Session session = sessionFactory.openSession();
		Criteria criteria = session.createCriteria(User.class);
		criteria.add(Restrictions.eq("email", user.getEmail()));
		criteria.add(Restrictions.eq("password", user.getPassword()));
		criteria.add(Restrictions.eq("isActivated", true));
		User finalUser = (User) criteria.uniqueResult();
		if (finalUser == null) {
			session.close();
			return null;
		}
		session.close();
		return finalUser;
	}

	@SuppressWarnings("finally")
	@Override
	public User getUserById(int id) {
		Session session = sessionFactory.openSession();
		org.hibernate.query.Query<User> query = session.createQuery("from User where id= :id", User.class)
				                               .setParameter("id", id);
		User user = null;
		try {
			user = query.getSingleResult();

		} catch (Exception e) {
		} finally {

			session.close();
			return user;
		}
	}

	@Override
	@SuppressWarnings({ "finally" })
	public User getUserByEmail(String email) {
		Session session = sessionFactory.openSession();
		/*
		 * Criteria criteria = session.createCriteria(User.class);
		 * criteria.add(Restrictions.eq("email", email)); User user = (User)
		 * criteria.setMaxResults(1).uniqueResult();
		 */

		// get user object from db
		org.hibernate.query.Query<User> query = session.createQuery("from User where email= :email", User.class)
				.setParameter("email", email);
		User user = null;

		try {
			user = query.getSingleResult();

		} catch (Exception e) {
		} finally {

			session.close();
			return user;
		}
	}
	/////////////// Register New Users ///////////////////////// */
	
	public int saveUser(User user) {
		int id = 0;
		Session session = sessionFactory.openSession();
		Transaction transaction = null;
		try {
			transaction = session.beginTransaction();
			id = (int) session.save(user);
			transaction.commit();

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			session.close();
		}
		return id;
	}
	
	////////////////////////////Update User///////////////////////////////////////

	@Override
	public boolean updateUser(User user) {
		// TODO Auto-generated method stub
		Session session = sessionFactory.openSession();
		Transaction transaction = null;
		try {
			transaction = session.beginTransaction();
			session.saveOrUpdate(user);
			transaction.commit();

		} catch (Exception e) {
			if (transaction != null) {
				transaction.rollback();
			}
		} finally {
			session.close();
		}
		return true;
	}

	////////////////// Set New Password //////////////////////////////
	
	public boolean setPassword(User user1) {
		Session session = sessionFactory.openSession();
		Transaction transaction = null;
		try {
			transaction = session.beginTransaction();
			String hashedPassword = BCrypt.hashpw(user1.getPassword(), BCrypt.gensalt(10));
			user1.setPassword(hashedPassword);
			System.out.println("" + hashedPassword);
			String hql = "update User set password=:password where id=:id";

			Query query = session.createQuery(hql);
			query.setParameter("password", hashedPassword);
			query.setParameter("id", user1.getId());
			query.executeUpdate();

			transaction.commit();
			session.close();
			return true;
		}
		catch (Exception e) {
			if (transaction != null)
				transaction.rollback();
			e.printStackTrace();
		}
		return false;
	}
}